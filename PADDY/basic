import pygame
import time
import random

pygame.init()
pygame.display.set_caption("Snake_Game")

img=pygame.image.load('Snake.png')

white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)

display_height = 600
display_width = 800

gameDisplay = pygame.display.set_mode((display_width, display_height))

clock = pygame.time.Clock()

Block_size = 20
FPS = 15
direction = "right"
head = pygame.transform.rotate(img, 270)

smallfont = pygame.font.SysFont("comicansms", 25)

medfont = pygame.font.SysFont("comicansms", 50)

largefont = pygame.font.SysFont("comicansms", 75)

def game_intro():
    intro = True

    while intro:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    intro = False
                if event.key == pygame.K_q:
                    pygame.quit()
                    quit()


        gameDisplay.fill(white)
        message_to_screen("Welcome to Snake's Game", green, -100, "large")

        message_to_screen("Your main aim is to collect as many apples as poosible", black, -30, "small")


        message_to_screen("Press C to play or Q to quit", black, 50, "small")

        pygame.display.update()
        clock.tick(15)





def pause():
    paused = True

    while paused:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    paused = False
                elif event.key == pygame.K_q:
                    pygame.quit()
                    quit()

        gameDisplay.fill(white)

        message_to_screen("Paused", black, -100, "large")
        message_to_screen("Press C to continue or Q to quit", black, 25, "small")

        pygame.display.update()
        clock.tick(5)


def score(score):
    text = smallfont.render("Score: " +str(score), True, black)
    gameDisplay.blit(text, [0, 0])

def snake(Block_size, snakeList):

    if direction == "right":
        head = pygame.transform.rotate(img, 270)

    if direction == "left":
        head = pygame.transform.rotate(img, 90)

    if direction == "up":
        head = img

    if direction == "down":
        head = pygame.transform.rotate(img, 180)

    gameDisplay.blit(head, (snakeList[-1][0], snakeList[-1][1]))
    for XnY in snakeList[:-1]:
        pygame.draw.rect(gameDisplay, green, [XnY[0], XnY[1], Block_size, Block_size])



def text_Object(text, color, size):
    if size == "small":
        textSurface = smallfont.render(text, True, color)
    elif size == "medium":
        textSurface = medfont.render(text, True, color)
    elif size == "large":
        textSurface = largefont.render(text, True, color)

    return textSurface, textSurface.get_rect()

def message_to_screen(msg, color, y_displace=0, size="small"):
    textSurf, textRect = text_Object(msg, color, size)
    textRect.center = (display_width/2), (display_height/2)+y_displace
    gameDisplay.blit(textSurf, textRect)


def gameLoop():
    global direction
    direction="right"
    gameExit = False
    gameOver = False
    lead_x = display_width / 2
    lead_y = display_height / 2
    lead_x_change = 10
    lead_y_change = 0

    snakeList = []
    snakeLength = 1

    randAppleX = round(random.randrange(0, display_width)/20.0)*20.0
    randAppleY = round(random.randrange(0, display_height)/20.0)*20.0

    while not gameExit:
        while gameOver == True:
            gameDisplay.fill(white)
            message_to_screen("Game Over !! ", red, -50, size="large")
            message_to_screen("Press Q to QUIT or Press C to play again", black, 50, size="small")
            message_to_screen("MADE BY PADMESH NAIK ", green, 100, size="medium")


            pygame.display.update()

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    gameExit = True
                    gameOver = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        gameExit = True
                        gameOver = False

                    if event.key == pygame.K_c:
                        gameLoop()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gameExit = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    direction = "left"
                    lead_x_change = -Block_size
                    lead_y_change = 0
                elif event.key == pygame.K_RIGHT:
                    direction = "right"
                    lead_x_change = +Block_size
                    lead_y_change = 0
                elif event.key == pygame.K_UP:
                    direction = "up"
                    lead_x_change = 0
                    lead_y_change = -Block_size
                elif event.key == pygame.K_DOWN:
                    direction = "down"
                    lead_y_change = +Block_size
                    lead_x_change = 0
                elif event.key == pygame.K_p:
                    pause()

        if lead_x >= display_width or lead_x < 0 or lead_y >= display_height or lead_y < 0:
            gameOver = True

        lead_x += lead_x_change
        lead_y += lead_y_change
        gameDisplay.fill(white)
        pygame.draw.rect(gameDisplay, red, [randAppleX, randAppleY, Block_size, Block_size])

        snakeHead = []
        snakeHead.append(lead_x)
        snakeHead.append(lead_y)
        snakeList.append(snakeHead)

        if len(snakeList) > snakeLength:
            del snakeList[0]

        for eachSegment in snakeList[:-1]:
            if eachSegment == snakeHead:
                gameOver = True
        snake(Block_size, snakeList)

        score(snakeLength-1)
        pygame.display.update()

        if lead_x == randAppleX and lead_y == randAppleY:
            randAppleX = round(random.randrange(0, display_width) / 20.0) * 20.0
            randAppleY = round(random.randrange(0, display_height) / 20.0) * 20.0
            snakeLength += 1
        clock.tick(FPS)

    pygame.quit()
    quit()

game_intro()

gameLoop()
